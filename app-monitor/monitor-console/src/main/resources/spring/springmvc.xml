<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd   
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd   
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd   
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">

	<!-- 注册了DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter两个bean，配置一些messageconverter。即解决了@Controller注解的使用前提配置。 -->
	<mvc:annotation-driven />
	<!-- 要使用spring mvc中的@Controller注解，就必须要配置<mvc:annotation-driven />，否则org.springframework.web.servlet.DispatcherServlet无法找到控制器并把请求分发到控制器 -->
	<context:annotation-config />
	<!-- 扫描java包中相关的mvc元注解 -->
	<context:component-scan base-package="org.yy.monitor.console.controller"></context:component-scan>
	<context:component-scan base-package="org.yy.monitor.plugins"></context:component-scan>


	<!-- 配置后，不会被springmvc(web.xml中配置的DispatcherServlet)处理 -->
	<mvc:resources mapping="/pluginres/**" location="classpath:/META-INF/plugin/" /><!-- 插件中的资源引用  -->
	<mvc:resources mapping="/resources/**" location="/resources/" /><!-- console项目的资源 -->
  

	<!-- 业务异常处理 -->
	<bean id="exceptionResolver" class="org.yy.framework.base.exception.AppExceptionResolver">
	</bean>



	<!-- 根据客户端的不同的请求决定不同的view进行响应, 如 /blog/1.json返回json格式数据 /blog/1.xml返回xml格式数据 
		/blog.do返回jsp -->
	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<!-- 用于开启 /userinfo/123?format=json 的支持 -->
		<property name="favorParameter" value="false" />
		<!-- 设置为true以忽略对Accept Header的支持 -->
		<property name="ignoreAcceptHeader" value="true" />
		<!-- 在没有扩展名时即: "/user/1" 时的默认展现形式 -->
		<property name="defaultContentType" value="text/html" />
		<!-- 扩展名至mimeType的映射,即 /user.json => application/json -->
		<!-- spring3.1的配置模式 -->
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
			</map>
		</property>
		<property name="viewResolvers">
			<list>
				<bean class="org.springframework.web.servlet.view.BeanNameViewResolver" />
				<bean
					class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<property name="viewClass"
						value="org.springframework.web.servlet.view.JstlView" />
					<property name="prefix" value="/WEB-INF/pages" />
					<property name="suffix" value=".jsp"></property>
				</bean>
			</list>
		</property>
		<property name="defaultViews">
			<list>
				<!-- for application/json org.springframework.web.servlet.view.json.MappingJacksonJsonView -->
				<bean class="org.yy.framework.base.view.FrameworkJacksonJsonView">
					<!-- 只处理非空值 -->
					<property name="objectMapper">
						<bean class="com.fasterxml.jackson.databind.ObjectMapper">
							<property name="serializationInclusion">
								<value type="com.fasterxml.jackson.annotation.JsonInclude$Include">NON_NULL</value>
							</property>
						</bean>
					</property>
				</bean>
			</list>
		</property>
	</bean>

</beans>